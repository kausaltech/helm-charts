# Default values for django.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Django Deployment Values
replicaCount: 1
revisionHistoryLimit: 2
# Can be used to override the AppVersion from chart
appVersion:
image:
  repository: ghcr.io/sanoguzhan/django-helm-test
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"
  containerPort: 8000

command: "exec /scripts/docker-entrypoint.sh uwsgi"

# Django Deployment Settings
# Init Container to collect static files
collectStatic:
  enabled: false
  name: staticfiles
  command: "python3 manage.py collectstatic --noinput"

# Job to run database migrations
dbMigrations:
  enabled: true
  name: db-migration
  command: "python3 manage.py migrate --noinput"
  resources: {}
  safeToEvict: true
  # Restart policy for the migration job pod.
  # - "OnFailure": Restart the pod if it fails
  # - "Never": Don't restart on failure, keep failed pods for debugging
  restartPolicy: Never

# Django Static files and Media data folders
# Set to path from working directory
data:
  staticFiles: "app/static/"
  mediaFiles: "app/media_files/"

probes:
  liveness:
    enabled: true
    path: /healthy
    # Use explicit HTTP Host header
    host: ""
  readiness:
    enabled: true
    path: /ready
    # Use explicit HTTP Host header
    host: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Django Service Values
service:
  type: ClusterIP
  port: 8000

# Caddy Settings (static + media files serving)
proxy:
  enabled: false
  repository: caddy
  tag: "2.7-alpine"
  pullPolicy: IfNotPresent
  useAppImage: false
  generateCaddyfile: true
  containerPort: 6000
  serveStatic: true
  serveMedia: true
  # command: [caddy, run, -c, /etc/caddy/Caddyfile]

# Env ConfigMap values
envConfigs: {}

# Env Secret Values (as plain text, not base64-encoded)
envSecrets: {}

additionalEnvFrom: []

# Django Ingress Values
ingress:
  enabled: true
  annotations: {}
  hosts:
    - host: example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

celery:
# Celery Beat Values
  beat:
    enabled: false
    componentName: celery-beat
    command: "celery -A app.celery beat -l DEBUG"
    replicaCount: 1
    strategy: Recreate
# Celery Worker Settings
  worker:
    enabled: false
    componentName: celery-worker
    command: "celery -A app.celery worker -l DEBUG"
    replicaCount: 1
    strategy: RollingUpdate
    healthCheckCmd: ""  # e.g. celery inspect ping -A app -d celery@$HOSTNAME
# Celery Flower Settings
  flower:
    enabled: false
    componentName: celery-flower
    command: "celery -A app.celery flower"
    replicaCount: 1
    strategy: RollingUpdate
    service:
      type: ClusterIP
      port:
        number: 5555
        name: flower
    ingress:
      enabled: false
      annotations: {}
      hosts:
        - host: example.com
          paths:
            - path: /
              pathType: Prefix
      tls: []

# Disable subchart by setting enabled value to false
redis:
  enabled: true
  auth:
    enabled: true
    password: redis
  master:
    podSecurityContext:
      enabled: true
      fsGroup: 1001

    containerSecurityContext:
      enabled: true
      runAsUser: 1001

    disableCommands: []  # by default the Bitnami chart disables FLUSHDB and FLUSHALL, but Django needs those

  replica:
    podSecurityContext:
      enabled: true
      fsGroup: 1001

    containerSecurityContext:
      enabled: true
      runAsUser: 1001

  volumePermissions:
    enabled: true
    runAsUser: 1001

  networkPolicy:
    enabled: true
    allowExternal: false
    allowExternalEgress: false
    ingressNSPodMatchLabels:
      redis-client: true

elasticsearch:
  enabled: false
  master:
    masterOnly: false
    replicaCount: 1
    heapSize: 512m
    resourcesPreset: 'large'
    persistence:
      size: '5Gi'
  data:
    replicaCount: 0
  coordinating:
    replicaCount: 0
  ingest:
    replicaCount: 0
  global:
    storageClass: ""
  #image:
  #metrics:
  #  enabled: true
  #  serviceMonitor:
  #    enabled: true

externalSecrets:
  enabled: false
  secretStoreRef:
    name: secretstore-sample
    kind: ClusterSecretStore
  refreshInterval: '24h'
  creationPolicy: Owner
  targets:
    # - name: secret-to-be-created
    #   mountPath: /run/secrets/ABCD
    #   data:
    #     - secretKey: username
    #       remoteRef:
    #         key: foo
    #         property: my-value
    #   dataFrom:

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Annotations for all deployments (django, celery, etc.)
commonPodAnnotations: {}

# Annotations for the Django pod only
podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after "resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

db:
  database: django
  user: django
  password: ""
  secret:
    create: false
    name: "" # if empty, will be generated using fullname template
  postgis: false
  cluster:
    create: true
    affinity: {}
    dataChecksums: true
    version: '16'
    instances: 3
    # stopDelay: 1800  # Time in seconds allowed for PostgreSQL instance to gracefully shutdown (default: 1800)
    # smartShutdownTimeout: 180  # Time in seconds reserved for smart shutdown to complete. Ensure enough time for fast shutdown (stopDelay - smartShutdownTimeout)
    size: '1Gi'
    storageClass: ''
    enablePodMonitor: true
    parameters: {}  # key-value pairs to be placed in the postgres config file
    name: "" # if empty, will be generated using fullname template
    backup:
      enabled: false
      target: prefer-standby
      retentionPolicy: '30d'
      s3Secret:
        name: ""  # must be set
        accessKeyName: "AWS_ACCESS_KEY_ID"
        secretAccessKeyName: "AWS_SECRET_ACCESS_KEY"
      endpointUrl: ""  # must be set
      destinationPath: ""  # must be set; format has to be "s3://<bucket>/[your-backup-folder]/"
    bootstrapRecovery:
      enabled: false  # if true, will use S3 storage from db.cluster.backup as source
    scheduledBackup:
      create: false
      name: "" # if empty, will be generated using fullname template

djangoCronJobs: []
  # - name: backup-cronjob
  #   command: backup.sh
  #   schedule: "0 3 * * *"  # daily at 3 a.m.
