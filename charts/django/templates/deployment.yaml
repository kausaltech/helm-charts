apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "django.fullname" . }}
  labels:
    {{- include "django.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ include "django.fullname" . }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "django.labels" . | nindent 6 }}
      app.kubernetes.io/component: {{ include "django.fullname" . }}
  template:
    metadata:
      labels:
        {{- include "django.labels" . | nindent 8 }}
        app.kubernetes.io/component: {{ include "django.fullname" . }}
      annotations:
        {{- with .Values.commonPodAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        checksum/env-configmap: {{ include (print $.Template.BasePath "/env-configmap.yaml") . | sha256sum }}
        checksum/env-secrets: {{ include (print $.Template.BasePath "/env-secrets.yaml") . | sha256sum }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "django.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.db.cluster.create }}
        - name: wait-for-db
          image: bitnami/kubectl
          imagePullPolicy: IfNotPresent
          args:
            - wait
            - clusters.postgresql.cnpg.io/{{ include "django.dbClusterName" . }}
            - --for=condition=ready
            - --timeout=180s
        {{- end }}
        {{- if .Values.dbMigrations.enabled }}
        - name: wait-for-migration
          image: bitnami/kubectl
          imagePullPolicy: IfNotPresent
          command:
            - 'sh'
            - '-c'
            - |
              JOB=job/{{ include "django.fullname" . }}-db-migrations ;
              if kubectl wait $JOB --for=delete --timeout=1s ; then
                exit 0 ;
              fi ;
              kubectl wait $JOB --for=condition=complete --timeout=180s
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- include "django.appImageConfig" . | nindent 10 }}
          {{-  with .Values.command }}
          command: ["/bin/sh"]
          args:
              - -c
              - >-
                  {{ . }}
          {{- end }}
          {{- include "django.envVariables" . | nindent 10 }}
          ports:
            - name: django
              containerPort: {{ .Values.image.containerPort }}
              protocol: TCP
          {{- with .Values.probes }}
          {{- if .liveness.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .liveness.path }}
              port: {{ $.Values.image.containerPort }}
              {{- if .liveness.host }}
              httpHeaders:
                - name: Host
                  value: {{ .liveness.host }}
              {{- end }}
            initialDelaySeconds: {{ .liveness.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .liveness.initialDelaySeconds | default 10 }}
            failureThreshold: {{ .liveness.failureThreshold | default 30 }}
          {{- end }}
          {{- if .readiness.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .readiness.path }}
              port: {{ $.Values.image.containerPort }}
              {{- if .readiness.host }}
              httpHeaders:
                - name: Host
                  value: {{ .readiness.host }}
              {{- end }}
            initialDelaySeconds: {{ .readiness.initialDelaySeconds | default 5 }}
            periodSeconds: {{ .readiness.initialDelaySeconds | default 10 }}
            failureThreshold: {{ .readiness.failureThreshold | default 30 }}
          {{- end }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- include "django.secretVolumeMounts" . | nindent 12 }}

        {{- if .Values.proxy.enabled }}
        - name: {{ printf "%s-%s" .Chart.Name "caddy" }}
          image:  "{{ include "django.appImage" . }}"
          {{- if .Values.proxy.command }}
          command:
            {{- .Values.proxy.command | toYaml | nindent 12}}
          {{- end }}
          ports:
            - name: caddy
              containerPort: {{ .Values.proxy.containerPort }}
              protocol: TCP
          volumeMounts:
          {{- if .Values.proxy.generateCaddyfile }}
            - name: caddy-config
              mountPath: /etc/caddy/Caddyfile
              subPath: Caddyfile
          {{- end }}
          {{- if not .Values.proxy.useAppImage }}
            - name: shared
              mountPath: /srv/{{ .Values.data.staticFiles }}
            - name: shared
              mountPath: /srv/{{ .Values.data.mediaFiles }}
          {{- end }}
        {{- end }}
      volumes:
        {{- if .Values.proxy.enabled }}
        {{- if .Values.proxy.generateCaddyfile }}
        - name: caddy-config
          configMap:
            name: caddy-config
        {{- end }}
        {{- if not .Values.proxy.useAppImage }}
        - name: shared
          emptyDir: {}
        {{- end }}
        {{- end }}
        {{- include "django.secretVolumes" . | nindent 8 }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
